generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  role     UserRole @default(USER)
  verified Boolean  @default(false)

  videos    Video[]
  Playlists Playlists[]
  History   History[]
  Liked     Liked[]
  Channel   Channel?    @relation(fields: [channelId], references: [id])
  channelId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id          Int     @id @default(autoincrement())
  banner      String?
  avatar      String?
  description String?
  isOfficial  Boolean @default(false)

  videos      Video[]
  subscribers User[]

  alias String? @unique
  name  String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id          Int         @id @default(autoincrement())
  title       String
  image       String?
  description String?
  videoStatus VideoStatus @default(PUBLISHED)

  views    Int @default(0)
  comments Int @default(0)
  likes    Int @default(0)

  User        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  Channel     Channel?   @relation(fields: [channelId], references: [id])
  channelId   Int?
  Playlists   Playlists? @relation(fields: [playlistsId], references: [id])
  playlistsId Int?
  History     History?   @relation(fields: [historyId], references: [id])
  historyId   Int?
  Liked       Liked?     @relation(fields: [likedId], references: [id])
  likedId     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlists {
  id     Int     @id @default(autoincrement())
  title  String
  videos Video[]

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model History {
  id     Int     @id @default(autoincrement())
  videos Video[]

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int
}

model Liked {
  id     Int     @id @default(autoincrement())
  videos Video[]

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int
}

enum UserRole {
  USER
  ADMIN
}

enum VideoStatus {
  PUBLISHED
  PENDING
  CANCELED
}
